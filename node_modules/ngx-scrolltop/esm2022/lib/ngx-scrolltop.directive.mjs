import { Directive, HostListener, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-scrolltop.core.service";
export class NgxScrollTopDirective {
    constructor(el, core) {
        this.el = el;
        this.core = core;
        this.mode = 'classic';
        this.show = false;
        this.hideElement();
    }
    onWindowScroll() {
        const show = this.core.onWindowScroll(this.mode);
        // Performance boost. Only update the DOM when the state changes.
        if (this.show !== show) {
            show ? this.showElement() : this.hideElement();
            this.show = show;
        }
    }
    onClick() {
        this.scrollToTop();
    }
    hideElement() {
        this.el.nativeElement.style.display = 'none';
    }
    showElement() {
        this.el.nativeElement.style.display = '';
    }
    scrollToTop() {
        this.core.scrollToTop();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.6", ngImport: i0, type: NgxScrollTopDirective, deps: [{ token: i0.ElementRef }, { token: i1.NgxScrollTopCoreService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.0.6", type: NgxScrollTopDirective, selector: "[ngxScrollTop]", inputs: { mode: ["ngxScrollTopMode", "mode"] }, host: { listeners: { "window:scroll": "onWindowScroll()", "click": "onClick()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.6", ngImport: i0, type: NgxScrollTopDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxScrollTop]',
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.NgxScrollTopCoreService }], propDecorators: { mode: [{
                type: Input,
                args: ['ngxScrollTopMode']
            }], onWindowScroll: [{
                type: HostListener,
                args: ['window:scroll']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNjcm9sbHRvcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsdG9wL3NyYy9saWIvbmd4LXNjcm9sbHRvcC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYyxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFPM0UsTUFBTSxPQUFPLHFCQUFxQjtJQUtoQyxZQUFvQixFQUFjLEVBQVUsSUFBNkI7UUFBckQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLFNBQUksR0FBSixJQUFJLENBQXlCO1FBSnZDLFNBQUksR0FBcUIsU0FBUyxDQUFDO1FBRTdELFNBQUksR0FBRyxLQUFLLENBQUM7UUFHbkIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFHTSxjQUFjO1FBQ25CLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVqRCxpRUFBaUU7UUFDakUsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtZQUN0QixJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQy9DLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUdNLE9BQU87UUFDWixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVPLFdBQVc7UUFDakIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDL0MsQ0FBQztJQUVPLFdBQVc7UUFDakIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVPLFdBQVc7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMxQixDQUFDOzhHQW5DVSxxQkFBcUI7a0dBQXJCLHFCQUFxQjs7MkZBQXJCLHFCQUFxQjtrQkFIakMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2lCQUMzQjtxSEFFbUMsSUFBSTtzQkFBckMsS0FBSzt1QkFBQyxrQkFBa0I7Z0JBU2xCLGNBQWM7c0JBRHBCLFlBQVk7dUJBQUMsZUFBZTtnQkFZdEIsT0FBTztzQkFEYixZQUFZO3VCQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neFNjcm9sbFRvcENvcmVTZXJ2aWNlIH0gZnJvbSAnLi9uZ3gtc2Nyb2xsdG9wLmNvcmUuc2VydmljZSc7XG5pbXBvcnQgeyBOZ3hTY3JvbGxUb3BNb2RlIH0gZnJvbSAnLi9uZ3gtc2Nyb2xsdG9wLmludGVyZmFjZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ3hTY3JvbGxUb3BdJyxcbn0pXG5leHBvcnQgY2xhc3MgTmd4U2Nyb2xsVG9wRGlyZWN0aXZlIHtcbiAgQElucHV0KCduZ3hTY3JvbGxUb3BNb2RlJykgcHVibGljIG1vZGU6IE5neFNjcm9sbFRvcE1vZGUgPSAnY2xhc3NpYyc7XG5cbiAgcHJpdmF0ZSBzaG93ID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBjb3JlOiBOZ3hTY3JvbGxUb3BDb3JlU2VydmljZSkge1xuICAgIHRoaXMuaGlkZUVsZW1lbnQoKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpzY3JvbGwnKVxuICBwdWJsaWMgb25XaW5kb3dTY3JvbGwoKTogdm9pZCB7XG4gICAgY29uc3Qgc2hvdyA9IHRoaXMuY29yZS5vbldpbmRvd1Njcm9sbCh0aGlzLm1vZGUpO1xuXG4gICAgLy8gUGVyZm9ybWFuY2UgYm9vc3QuIE9ubHkgdXBkYXRlIHRoZSBET00gd2hlbiB0aGUgc3RhdGUgY2hhbmdlcy5cbiAgICBpZiAodGhpcy5zaG93ICE9PSBzaG93KSB7XG4gICAgICBzaG93ID8gdGhpcy5zaG93RWxlbWVudCgpIDogdGhpcy5oaWRlRWxlbWVudCgpO1xuICAgICAgdGhpcy5zaG93ID0gc2hvdztcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIHB1YmxpYyBvbkNsaWNrKCk6IHZvaWQge1xuICAgIHRoaXMuc2Nyb2xsVG9Ub3AoKTtcbiAgfVxuXG4gIHByaXZhdGUgaGlkZUVsZW1lbnQoKTogdm9pZCB7XG4gICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH1cblxuICBwcml2YXRlIHNob3dFbGVtZW50KCk6IHZvaWQge1xuICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gIH1cblxuICBwcml2YXRlIHNjcm9sbFRvVG9wKCk6IHZvaWQge1xuICAgIHRoaXMuY29yZS5zY3JvbGxUb1RvcCgpO1xuICB9XG59XG4iXX0=