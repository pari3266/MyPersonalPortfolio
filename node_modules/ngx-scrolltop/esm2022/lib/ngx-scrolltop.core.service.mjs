import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { polyfill as smoothscrollPolyfill } from 'seamless-scroll-polyfill';
import * as i0 from "@angular/core";
export class NgxScrollTopCoreService {
    constructor(document) {
        this.document = document;
        this.scrolledFromTop = false;
        this.isBrowser = typeof window !== 'undefined';
        this.alreadyActivated = false;
    }
    onWindowScroll(mode) {
        const position = this.document.documentElement?.scrollTop || this.document.scrollingElement?.scrollTop;
        switch (mode) {
            case 'classic':
                return this.classicMode(position);
            case 'smart':
                return this.smartMode(position);
        }
    }
    classicMode(position) {
        if (this.isBrowser && position > window.innerHeight) {
            return true;
        }
        else {
            return false;
        }
    }
    smartMode(position) {
        let show = false;
        if (position === 0) {
            show = false;
            this.scrolledFromTop = false;
        }
        if (this.scrolledFromTop && this.scrollOffset > position) {
            show = true;
        }
        if (this.isBrowser && position > window.innerHeight * 2) {
            this.scrolledFromTop = true;
            this.scrollOffset = position;
        }
        return show;
    }
    scrollToTop() {
        if (this.isBrowser) {
            // Kick off the polyfill for iOS Safari
            if (!this.alreadyActivated) {
                smoothscrollPolyfill();
                this.alreadyActivated = true;
            }
            // Scroll to the top
            window.scroll({ top: 0, left: 0, behavior: 'smooth' });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.6", ngImport: i0, type: NgxScrollTopCoreService, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.6", ngImport: i0, type: NgxScrollTopCoreService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.6", ngImport: i0, type: NgxScrollTopCoreService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNjcm9sbHRvcC5jb3JlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsdG9wL3NyYy9saWIvbmd4LXNjcm9sbHRvcC5jb3JlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxRQUFRLElBQUksb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7QUFJNUUsTUFBTSxPQUFPLHVCQUF1QjtJQU1sQyxZQUFzQyxRQUFhO1FBQWIsYUFBUSxHQUFSLFFBQVEsQ0FBSztRQUwzQyxvQkFBZSxHQUFHLEtBQUssQ0FBQztRQUVmLGNBQVMsR0FBWSxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUM7UUFDNUQscUJBQWdCLEdBQVksS0FBSyxDQUFDO0lBRVksQ0FBQztJQUVoRCxjQUFjLENBQUMsSUFBc0I7UUFDMUMsTUFBTSxRQUFRLEdBQ1osSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsU0FBUyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDO1FBQ3hGLFFBQVEsSUFBSSxFQUFFO1lBQ1osS0FBSyxTQUFTO2dCQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNwQyxLQUFLLE9BQU87Z0JBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ25DO0lBQ0gsQ0FBQztJQUVPLFdBQVcsQ0FBQyxRQUFnQjtRQUNsQyxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQUU7WUFDbkQsT0FBTyxJQUFJLENBQUM7U0FDYjthQUFNO1lBQ0wsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7SUFFTyxTQUFTLENBQUMsUUFBZ0I7UUFDaEMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBRWpCLElBQUksUUFBUSxLQUFLLENBQUMsRUFBRTtZQUNsQixJQUFJLEdBQUcsS0FBSyxDQUFDO1lBQ2IsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7U0FDOUI7UUFFRCxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLEVBQUU7WUFDeEQsSUFBSSxHQUFHLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBRTtZQUN2RCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztZQUM1QixJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQztTQUM5QjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFdBQVc7UUFDaEIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLHVDQUF1QztZQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO2dCQUMxQixvQkFBb0IsRUFBRSxDQUFDO2dCQUN2QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO2FBQzlCO1lBQ0Qsb0JBQW9CO1lBQ3BCLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDeEQ7SUFDSCxDQUFDOzhHQXpEVSx1QkFBdUIsa0JBTWQsUUFBUTtrSEFOakIsdUJBQXVCOzsyRkFBdkIsdUJBQXVCO2tCQURuQyxVQUFVOzswQkFPSSxNQUFNOzJCQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHBvbHlmaWxsIGFzIHNtb290aHNjcm9sbFBvbHlmaWxsIH0gZnJvbSAnc2VhbWxlc3Mtc2Nyb2xsLXBvbHlmaWxsJztcbmltcG9ydCB7IE5neFNjcm9sbFRvcE1vZGUgfSBmcm9tICcuL25neC1zY3JvbGx0b3AuaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5neFNjcm9sbFRvcENvcmVTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzY3JvbGxlZEZyb21Ub3AgPSBmYWxzZTtcbiAgcHJpdmF0ZSBzY3JvbGxPZmZzZXQ6IG51bWJlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBpc0Jyb3dzZXI6IGJvb2xlYW4gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbiAgcHJpdmF0ZSBhbHJlYWR5QWN0aXZhdGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55KSB7fVxuXG4gIHB1YmxpYyBvbldpbmRvd1Njcm9sbChtb2RlOiBOZ3hTY3JvbGxUb3BNb2RlKTogYm9vbGVhbiB7XG4gICAgY29uc3QgcG9zaXRpb246IG51bWJlciA9XG4gICAgICB0aGlzLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudD8uc2Nyb2xsVG9wIHx8IHRoaXMuZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudD8uc2Nyb2xsVG9wO1xuICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgY2FzZSAnY2xhc3NpYyc6XG4gICAgICAgIHJldHVybiB0aGlzLmNsYXNzaWNNb2RlKHBvc2l0aW9uKTtcbiAgICAgIGNhc2UgJ3NtYXJ0JzpcbiAgICAgICAgcmV0dXJuIHRoaXMuc21hcnRNb2RlKHBvc2l0aW9uKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNsYXNzaWNNb2RlKHBvc2l0aW9uOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5pc0Jyb3dzZXIgJiYgcG9zaXRpb24gPiB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzbWFydE1vZGUocG9zaXRpb246IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGxldCBzaG93ID0gZmFsc2U7XG5cbiAgICBpZiAocG9zaXRpb24gPT09IDApIHtcbiAgICAgIHNob3cgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2Nyb2xsZWRGcm9tVG9wID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2Nyb2xsZWRGcm9tVG9wICYmIHRoaXMuc2Nyb2xsT2Zmc2V0ID4gcG9zaXRpb24pIHtcbiAgICAgIHNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzQnJvd3NlciAmJiBwb3NpdGlvbiA+IHdpbmRvdy5pbm5lckhlaWdodCAqIDIpIHtcbiAgICAgIHRoaXMuc2Nyb2xsZWRGcm9tVG9wID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2Nyb2xsT2Zmc2V0ID0gcG9zaXRpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIHNob3c7XG4gIH1cblxuICBwdWJsaWMgc2Nyb2xsVG9Ub3AoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNCcm93c2VyKSB7XG4gICAgICAvLyBLaWNrIG9mZiB0aGUgcG9seWZpbGwgZm9yIGlPUyBTYWZhcmlcbiAgICAgIGlmICghdGhpcy5hbHJlYWR5QWN0aXZhdGVkKSB7XG4gICAgICAgIHNtb290aHNjcm9sbFBvbHlmaWxsKCk7XG4gICAgICAgIHRoaXMuYWxyZWFkeUFjdGl2YXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICAvLyBTY3JvbGwgdG8gdGhlIHRvcFxuICAgICAgd2luZG93LnNjcm9sbCh7IHRvcDogMCwgbGVmdDogMCwgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xuICAgIH1cbiAgfVxufVxuIl19